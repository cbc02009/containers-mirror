name: Release

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: ["apps/**"]

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  changed-files:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: "${{ steps.generate-token.outputs.token }}"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44.5.7
        with:
          dir_names: true
          dir_names_max_depth: 2
          json: true
          files: |
            apps/**

      - name: List all changed files
        run: |
          echo '${{ steps.changed-files.outputs.all_changed_files }}'

      - id: set-matrix
        run: echo "matrix={\"container\":${{ steps.changed-files.outputs.all_changed_files }}}" >> "${GITHUB_OUTPUT}"

  push:
    name: Push
    runs-on: ubuntu-latest
    # runs-on: ["self-hosted"]
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [changed-files]
    strategy:
      matrix: ${{ fromJSON(needs.changed-files.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Prepare
        id: prep
        run: |
          container_name=$(basename ${{ matrix.container }})
          echo "container-name=${container_name}" >> "${GITHUB_OUTPUT}"

          container_image=$(head -1 ./apps/${container_name}/Dockerfile | sed 's/^FROM //')
          container_version=$(cut -d':' -f2 <<< "${container_image}")
          if [[ "${container_version}" == *sha256 ]]; then
              container_version=$(cut -d'@' -f1 <<< "${container_version}")
          fi
          echo "container-version=${container_version}" >> "${GITHUB_OUTPUT}"

          container_platform=$(cat ./apps/${container_name}/PLATFORM)
          echo "container-platform=${container_platform}" >> "${GITHUB_OUTPUT}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0

      - name: Build and Push
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          build-args: VERSION=${{ steps.prep.outputs.container-version }}
          context: .
          platforms: ${{ steps.prep.outputs.container-platform }}
          file: ./apps/${{ steps.prep.outputs.container-name }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ steps.prep.outputs.container-name }}:${{ steps.prep.outputs.container-version }}
